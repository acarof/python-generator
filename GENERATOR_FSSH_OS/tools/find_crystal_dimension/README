To calculate how large an arbitrary unit cell has to be in order to accomodate a linear chain of certain length, use this script.
Save it as "find_crystal_bb.py" and use it as follows:

    1. Obtain the box dimensions for a single unit cell (the smallest sensible unit of a crystal). Call the script as follows

                ./find_crystal_bb.py  a b c alpha beta gamma start_x start_y start_z length vector_x vector_y vector_z radius_vdw

With (a, b, c) being the length of the cell vectors in angstrom, (alpha, beta, gamma) being the cell angles in degrees, (start_*) being the start of the chain in cartesian coordinates and angstrom length is the length of the chain in angstrom, (vector_*) is the direction of the line in cartesian coordinates and angstrom, and radius_vdw being the van der Waals cutoff to be used in angstrom. Note that the cartesian coordinates follow the regular assumption that the a vector is along x and the b vector is in the xy plane. Your output looks like this:

Number of unit cells needed in direction of the three lattice vectors (assumes start point is in unit cell):
Vector a needs to go from -1.219643 to 13.027829
Vector b needs to go from -1.481674 to 11.380977
Vector c needs to go from -0.971990 to 7.474451
Any fractional unit cells need to be fully included, i.e. -2.1 unit cells means 3 in negative direction and +2.1 means 3 in positive direction

This means that your supercell has to have the size of (2+14, 2+12, 1+8) unit cells.

    2. Build a super cell of the suggested size and run it in CP2K with the DUMP_PSF feature in an constant-volume ensemble.
    3. Call the script again, but now add three parameters to the command line used above: radius_aom (the range of molecules to be activated), the psf file as generated by cp2k and the coordinates file.

The output now lists the molecule id (zero-based) of the active molecules.